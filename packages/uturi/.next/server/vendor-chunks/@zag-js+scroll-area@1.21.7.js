"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zag-js+scroll-area@1.21.7";
exports.ids = ["vendor-chunks/@zag-js+scroll-area@1.21.7"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@zag-js+scroll-area@1.21.7/node_modules/@zag-js/scroll-area/dist/index.mjs":
/*!***********************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@zag-js+scroll-area@1.21.7/node_modules/@zag-js/scroll-area/dist/index.mjs ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anatomy: () => (/* binding */ anatomy),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   machine: () => (/* binding */ machine),\n/* harmony export */   props: () => (/* binding */ props),\n/* harmony export */   splitProps: () => (/* binding */ splitProps)\n/* harmony export */ });\n/* harmony import */ var _zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zag-js/anatomy */ \"(ssr)/../../node_modules/.pnpm/@zag-js+anatomy@1.21.7/node_modules/@zag-js/anatomy/dist/index.mjs\");\n/* harmony import */ var _zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @zag-js/dom-query */ \"(ssr)/../../node_modules/.pnpm/@zag-js+dom-query@1.21.7/node_modules/@zag-js/dom-query/dist/index.mjs\");\n/* harmony import */ var _zag_js_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @zag-js/utils */ \"(ssr)/../../node_modules/.pnpm/@zag-js+utils@1.21.7/node_modules/@zag-js/utils/dist/index.mjs\");\n/* harmony import */ var _zag_js_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @zag-js/core */ \"(ssr)/../../node_modules/.pnpm/@zag-js+core@1.21.7/node_modules/@zag-js/core/dist/index.mjs\");\n/* harmony import */ var _zag_js_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @zag-js/types */ \"(ssr)/../../node_modules/.pnpm/@zag-js+types@1.21.7/node_modules/@zag-js/types/dist/index.mjs\");\n\n\n\n\n\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar anatomy = (0,_zag_js_anatomy__WEBPACK_IMPORTED_MODULE_0__.createAnatomy)(\"scroll-area\").parts(\"root\", \"viewport\", \"content\", \"scrollbar\", \"thumb\", \"corner\");\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `scroll-area-${ctx.id}`;\nvar getViewportId = (ctx) => ctx.ids?.viewport ?? `scroll-area-${ctx.id}:viewport`;\nvar getContentId = (ctx) => ctx.ids?.content ?? `scroll-area-${ctx.id}:content`;\nvar getRootEl = (ctx) => ctx.getById(getRootId(ctx));\nvar getViewportEl = (ctx) => ctx.getById(getViewportId(ctx));\nvar getContentEl = (ctx) => ctx.getById(getContentId(ctx));\nvar getScrollbarXEl = (ctx) => (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.query)(getRootEl(ctx), `[data-part=scrollbar][data-orientation=horizontal][data-ownedby=\"${getRootId(ctx)}\"]`);\nvar getScrollbarYEl = (ctx) => (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.query)(getRootEl(ctx), `[data-part=scrollbar][data-orientation=vertical][data-ownedby=\"${getRootId(ctx)}\"]`);\nvar getThumbXEl = (ctx) => (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.query)(getScrollbarXEl(ctx), `[data-part=thumb][data-orientation=horizontal][data-ownedby=\"${getRootId(ctx)}\"]`);\nvar getThumbYEl = (ctx) => (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.query)(getScrollbarYEl(ctx), `[data-part=thumb][data-orientation=vertical][data-ownedby=\"${getRootId(ctx)}\"]`);\nvar getCornerEl = (ctx) => (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.query)(getRootEl(ctx), `[data-part=corner][data-ownedby=\"${getRootId(ctx)}\"]`);\n\n// src/utils/scroll-progress.ts\nfunction getScrollProgress(element, scrollThreshold) {\n  if (!element) return EMPTY_SCROLL_PROGRESS;\n  let progressX = 0;\n  let progressY = 0;\n  const maxScrollX = element.scrollWidth - element.clientWidth;\n  if (maxScrollX > scrollThreshold) {\n    progressX = Math.min(1, Math.max(0, element.scrollLeft / maxScrollX));\n  }\n  const maxScrollY = element.scrollHeight - element.clientHeight;\n  if (maxScrollY > scrollThreshold) {\n    progressY = Math.min(1, Math.max(0, element.scrollTop / maxScrollY));\n  }\n  return { x: progressX, y: progressY };\n}\nvar EMPTY_SCROLL_PROGRESS = { x: 0, y: 0 };\n\n// src/utils/smooth-scroll.ts\nvar DURATION = 300;\nvar EASE_OUT_QUAD = (t) => t * (2 - t);\nfunction smoothScroll(node, options = {}) {\n  const { top, left, duration = DURATION, easing = EASE_OUT_QUAD, onComplete } = options;\n  if (!node) return;\n  const state = {\n    startTime: 0,\n    startScrollTop: node.scrollTop,\n    startScrollLeft: node.scrollLeft,\n    targetScrollTop: top ?? node.scrollTop,\n    targetScrollLeft: left ?? node.scrollLeft\n  };\n  let cancelled = false;\n  const cleanup = () => {\n    if (state.rafId) {\n      cancelAnimationFrame(state.rafId);\n      state.rafId = void 0;\n    }\n    cancelled = true;\n  };\n  const animate = (currentTime) => {\n    if (cancelled) return;\n    if (state.startTime === 0) {\n      state.startTime = currentTime;\n    }\n    const elapsed = currentTime - state.startTime;\n    const progress = Math.min(elapsed / duration, 1);\n    const easedProgress = easing(progress);\n    const deltaTop = state.targetScrollTop - state.startScrollTop;\n    const deltaLeft = state.targetScrollLeft - state.startScrollLeft;\n    node.scrollTop = state.startScrollTop + deltaTop * easedProgress;\n    node.scrollLeft = state.startScrollLeft + deltaLeft * easedProgress;\n    if (progress < 1) {\n      state.rafId = requestAnimationFrame(animate);\n    } else {\n      onComplete?.();\n    }\n  };\n  state.rafId = requestAnimationFrame(animate);\n  return cleanup;\n}\n\n// src/utils/scroll-to.ts\nfunction scrollTo(node, options = {}) {\n  if (!node) return;\n  const { top, left, behavior = \"smooth\", easing, duration } = options;\n  if (behavior === \"smooth\") {\n    smoothScroll(node, { top, left, easing, duration });\n  } else {\n    const scrollOptions = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.compact)({ behavior, top, left });\n    node.scrollTo(scrollOptions);\n  }\n}\nfunction scrollToEdge(node, edge, dir, behavior = \"smooth\", easing, duration) {\n  if (!node) return;\n  const maxLeft = node.scrollWidth - node.clientWidth;\n  const maxTop = node.scrollHeight - node.clientHeight;\n  const isRtl = dir === \"rtl\";\n  let targetScrollTop;\n  let targetScrollLeft;\n  switch (edge) {\n    case \"top\":\n      targetScrollTop = 0;\n      break;\n    case \"bottom\":\n      targetScrollTop = maxTop;\n      break;\n    case \"left\":\n      if (isRtl) {\n        const negative = node.scrollLeft <= 0;\n        targetScrollLeft = negative ? -maxLeft : 0;\n      } else {\n        targetScrollLeft = 0;\n      }\n      break;\n    case \"right\":\n      if (isRtl) {\n        const negative = node.scrollLeft <= 0;\n        targetScrollLeft = negative ? 0 : maxLeft;\n      } else {\n        targetScrollLeft = maxLeft;\n      }\n      break;\n  }\n  if (behavior === \"smooth\") {\n    smoothScroll(node, { top: targetScrollTop, left: targetScrollLeft, easing, duration });\n  } else {\n    const options = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.compact)({ left: targetScrollLeft, top: targetScrollTop, behavior });\n    node.scrollTo(options);\n  }\n}\n\n// src/scroll-area.connect.ts\nfunction connect(service, normalize) {\n  const { send, context, prop, scope } = service;\n  const cornerSize = context.get(\"cornerSize\");\n  const thumbSize = context.get(\"thumbSize\");\n  const hiddenState = context.get(\"hiddenState\");\n  const atSides = context.get(\"atSides\");\n  return {\n    isAtTop: atSides.top,\n    isAtBottom: atSides.bottom,\n    isAtLeft: atSides.left,\n    isAtRight: atSides.right,\n    hasOverflowX: !hiddenState.scrollbarXHidden,\n    hasOverflowY: !hiddenState.scrollbarYHidden,\n    getScrollProgress() {\n      return getScrollProgress(getViewportEl(scope), 0);\n    },\n    scrollToEdge(details) {\n      const { edge, behavior } = details;\n      return scrollToEdge(getViewportEl(scope), edge, prop(\"dir\"), behavior);\n    },\n    scrollTo(details) {\n      return scrollTo(getViewportEl(scope), details);\n    },\n    getScrollbarState(props2) {\n      const horizontal = props2.orientation === \"horizontal\";\n      return {\n        hovering: context.get(\"hovering\"),\n        scrolling: context.get(horizontal ? \"scrollingX\" : \"scrollingY\"),\n        hidden: horizontal ? hiddenState.scrollbarXHidden : hiddenState.scrollbarYHidden\n      };\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\"),\n        role: \"presentation\",\n        \"data-overflow-x\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarXHidden),\n        \"data-overflow-y\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarYHidden),\n        onPointerEnter(event) {\n          send({ type: \"root.pointerenter\", pointerType: event.pointerType });\n        },\n        onPointerMove(event) {\n          send({ type: \"root.pointerenter\", pointerType: event.pointerType });\n        },\n        onPointerDown({ pointerType }) {\n          send({ type: \"root.pointerdown\", pointerType });\n        },\n        onPointerLeave() {\n          send({ type: \"root.pointerleave\" });\n        },\n        style: {\n          position: \"relative\",\n          \"--corder-width\": (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.toPx)(cornerSize?.width),\n          \"--corder-height\": (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.toPx)(cornerSize?.height),\n          \"--thumb-width\": (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.toPx)(thumbSize?.width),\n          \"--thumb-height\": (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.toPx)(thumbSize?.height)\n        }\n      });\n    },\n    getViewportProps() {\n      const handleUserInteraction = () => {\n        send({ type: \"user.scroll\" });\n      };\n      return normalize.element({\n        ...parts.viewport.attrs,\n        role: \"presentation\",\n        \"data-ownedby\": getRootId(scope),\n        id: getViewportId(scope),\n        \"data-at-top\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(atSides.top),\n        \"data-at-bottom\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(atSides.bottom),\n        \"data-at-left\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(atSides.left),\n        \"data-at-right\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(atSides.right),\n        \"data-overflow-x\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarXHidden),\n        \"data-overflow-y\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarYHidden),\n        tabIndex: hiddenState.scrollbarXHidden || hiddenState.scrollbarYHidden ? void 0 : 0,\n        style: {\n          overflow: \"auto\"\n        },\n        onScroll(event) {\n          send({ type: \"viewport.scroll\", target: event.currentTarget });\n        },\n        onWheel: handleUserInteraction,\n        onTouchMove: handleUserInteraction,\n        onPointerMove: handleUserInteraction,\n        onPointerEnter: handleUserInteraction,\n        onKeyDown: handleUserInteraction\n      });\n    },\n    getContentProps() {\n      return normalize.element({\n        ...parts.content.attrs,\n        id: getContentId(scope),\n        role: \"presentation\",\n        \"data-overflow-x\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarXHidden),\n        \"data-overflow-y\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarYHidden),\n        style: {\n          minWidth: \"fit-content\"\n        }\n      });\n    },\n    getScrollbarProps(props2 = {}) {\n      const { orientation = \"vertical\" } = props2;\n      return normalize.element({\n        ...parts.scrollbar.attrs,\n        \"data-ownedby\": getRootId(scope),\n        \"data-orientation\": orientation,\n        \"data-scrolling\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(context.get(orientation === \"horizontal\" ? \"scrollingX\" : \"scrollingY\")),\n        \"data-hover\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(context.get(\"hovering\")),\n        \"data-overflow-x\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarXHidden),\n        \"data-overflow-y\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarYHidden),\n        onPointerUp() {\n          send({ type: \"scrollbar.pointerup\", orientation });\n        },\n        onPointerDown(event) {\n          if (event.button !== 0) {\n            return;\n          }\n          if (event.currentTarget !== event.target) {\n            return;\n          }\n          const point = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getEventPoint)(event);\n          send({ type: \"scrollbar.pointerdown\", orientation, point });\n          event.stopPropagation();\n        },\n        style: {\n          position: \"absolute\",\n          touchAction: \"none\",\n          WebkitUserSelect: \"none\",\n          userSelect: \"none\",\n          ...orientation === \"vertical\" && {\n            top: 0,\n            bottom: `var(--corder-height)`,\n            insetInlineEnd: 0\n          },\n          ...orientation === \"horizontal\" && {\n            insetInlineStart: 0,\n            insetInlineEnd: `var(--corder-width)`,\n            bottom: 0\n          }\n        }\n      });\n    },\n    getThumbProps(props2 = {}) {\n      const { orientation = \"vertical\" } = props2;\n      return normalize.element({\n        ...parts.thumb.attrs,\n        \"data-ownedby\": getRootId(scope),\n        \"data-orientation\": orientation,\n        onPointerDown(event) {\n          if (event.button !== 0) return;\n          const point = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getEventPoint)(event);\n          send({ type: \"thumb.pointerdown\", orientation, point });\n        },\n        style: {\n          ...orientation === \"vertical\" && {\n            height: \"var(--thumb-height)\"\n          },\n          ...orientation === \"horizontal\" && {\n            width: \"var(--thumb-width)\"\n          }\n        }\n      });\n    },\n    getCornerProps() {\n      return normalize.element({\n        ...parts.corner.attrs,\n        \"data-ownedby\": getRootId(scope),\n        \"data-hover\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(context.get(\"hovering\")),\n        \"data-state\": hiddenState.cornerHidden ? \"hidden\" : \"visible\",\n        \"data-overflow-x\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarXHidden),\n        \"data-overflow-y\": (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.dataAttr)(!hiddenState.scrollbarYHidden),\n        style: {\n          position: \"absolute\",\n          bottom: 0,\n          insetInlineEnd: 0,\n          width: \"var(--corder-width)\",\n          height: \"var(--corder-height)\"\n        }\n      });\n    }\n  };\n}\nfunction getScrollOffset(element, prop, axis) {\n  if (!element) return 0;\n  const styles = (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.getComputedStyle)(element);\n  const start = axis === \"x\" ? \"Left\" : \"Top\";\n  const end = axis === \"x\" ? \"Right\" : \"Bottom\";\n  return parseFloat(styles[`${prop}${start}`]) + parseFloat(styles[`${prop}${end}`]);\n}\n\n// src/utils/scroll-sides.ts\nfunction getScrollSides(node, dir) {\n  const scrollTop = node.scrollTop;\n  const scrollLeft = node.scrollLeft;\n  const isRtl = dir === \"rtl\";\n  const threshold = 1;\n  const hasVerticalScroll = node.scrollHeight - node.clientHeight > threshold;\n  const hasHorizontalScroll = node.scrollWidth - node.clientWidth > threshold;\n  const maxScrollLeft = node.scrollWidth - node.clientWidth;\n  const maxScrollTop = node.scrollHeight - node.clientHeight;\n  let atLeft = false;\n  let atRight = false;\n  let atTop = false;\n  let atBottom = false;\n  if (hasHorizontalScroll) {\n    if (isRtl) {\n      if (scrollLeft <= 0) {\n        atLeft = Math.abs(scrollLeft) >= maxScrollLeft - threshold;\n        atRight = Math.abs(scrollLeft) <= threshold;\n      } else {\n        atLeft = scrollLeft <= threshold;\n        atRight = scrollLeft >= maxScrollLeft - threshold;\n      }\n    } else {\n      atLeft = scrollLeft <= threshold;\n      atRight = scrollLeft >= maxScrollLeft - threshold;\n    }\n  }\n  if (hasVerticalScroll) {\n    atTop = scrollTop <= threshold;\n    atBottom = scrollTop >= maxScrollTop - threshold;\n  }\n  return {\n    top: atTop,\n    right: atRight,\n    bottom: atBottom,\n    left: atLeft\n  };\n}\n\n// src/utils/timeout.ts\nvar EMPTY = 0;\nvar Timeout = class {\n  constructor() {\n    __publicField(this, \"currentId\", EMPTY);\n    __publicField(this, \"clear\", () => {\n      if (this.currentId !== EMPTY) {\n        clearTimeout(this.currentId);\n        this.currentId = EMPTY;\n      }\n    });\n    __publicField(this, \"disposeEffect\", () => {\n      return this.clear;\n    });\n  }\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = EMPTY;\n      fn();\n    }, delay);\n  }\n  isStarted() {\n    return this.currentId !== EMPTY;\n  }\n};\n\n// src/scroll-area.machine.ts\nvar MIN_THUMB_SIZE = 20;\nvar SCROLL_TIMEOUT = 1e3;\nvar machine = (0,_zag_js_core__WEBPACK_IMPORTED_MODULE_3__.createMachine)({\n  props({ props: props2 }) {\n    return {\n      id: \"sv\",\n      ...props2\n    };\n  },\n  context({ bindable }) {\n    return {\n      scrollingX: bindable(() => ({ defaultValue: false })),\n      scrollingY: bindable(() => ({ defaultValue: false })),\n      hovering: bindable(() => ({ defaultValue: false })),\n      touchModality: bindable(() => ({ defaultValue: false })),\n      atSides: bindable(() => ({\n        defaultValue: { top: true, right: false, bottom: false, left: true }\n      })),\n      cornerSize: bindable(() => ({\n        defaultValue: { width: 0, height: 0 }\n      })),\n      thumbSize: bindable(() => ({\n        defaultValue: { width: 0, height: 0 }\n      })),\n      hiddenState: bindable(() => ({\n        defaultValue: {\n          scrollbarYHidden: false,\n          scrollbarXHidden: false,\n          cornerHidden: false\n        },\n        hash(a) {\n          return `Y:${a.scrollbarYHidden} X:${a.scrollbarXHidden} C:${a.cornerHidden}`;\n        }\n      }))\n    };\n  },\n  refs() {\n    return {\n      orientation: \"vertical\",\n      scrollPosition: { x: 0, y: 0 },\n      scrollYTimeout: new Timeout(),\n      scrollXTimeout: new Timeout(),\n      scrollEndTimeout: new Timeout(),\n      startX: 0,\n      startY: 0,\n      startScrollTop: 0,\n      startScrollLeft: 0,\n      programmaticScroll: true\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  watch({ track, prop, context, send }) {\n    track([() => prop(\"dir\"), () => context.hash(\"hiddenState\")], () => {\n      send({ type: \"thumb.measure\" });\n    });\n  },\n  effects: [\"trackContentResize\", \"trackViewportVisibility\", \"trackWheelEvent\"],\n  entry: [\"checkHovering\"],\n  exit: [\"clearTimeouts\"],\n  on: {\n    \"thumb.measure\": {\n      actions: [\"setThumbSize\"]\n    },\n    \"viewport.scroll\": {\n      actions: [\"setThumbSize\", \"setScrolling\", \"setProgrammaticScroll\"]\n    },\n    \"root.pointerenter\": {\n      actions: [\"setTouchModality\", \"setHovering\"]\n    },\n    \"root.pointerdown\": {\n      actions: [\"setTouchModality\"]\n    },\n    \"root.pointerleave\": {\n      actions: [\"clearHovering\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"scrollbar.pointerdown\": {\n          target: \"dragging\",\n          actions: [\"scrollToPointer\", \"startDragging\"]\n        },\n        \"thumb.pointerdown\": {\n          target: \"dragging\",\n          actions: [\"startDragging\"]\n        }\n      }\n    },\n    dragging: {\n      effects: [\"trackPointerMove\"],\n      on: {\n        \"thumb.pointermove\": {\n          actions: [\"setDraggingScroll\"]\n        },\n        \"scrollbar.pointerup\": {\n          target: \"idle\",\n          actions: [\"stopDragging\"]\n        },\n        \"thumb.pointerup\": {\n          target: \"idle\",\n          actions: [\"clearScrolling\", \"stopDragging\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      setTouchModality({ context, event }) {\n        context.set(\"touchModality\", event.pointerType === \"touch\");\n      },\n      setHovering({ context }) {\n        context.set(\"hovering\", true);\n      },\n      clearHovering({ context }) {\n        context.set(\"hovering\", false);\n      },\n      setProgrammaticScroll({ refs }) {\n        const scrollEndTimeout = refs.get(\"scrollEndTimeout\");\n        scrollEndTimeout.start(100, () => {\n          refs.set(\"programmaticScroll\", true);\n        });\n      },\n      clearScrolling({ context, event }) {\n        context.set(event.orientation === \"vertical\" ? \"scrollingY\" : \"scrollingX\", false);\n      },\n      setThumbSize({ context, scope, prop }) {\n        const viewportEl = getViewportEl(scope);\n        if (!viewportEl) return;\n        const scrollableContentHeight = viewportEl.scrollHeight;\n        const scrollableContentWidth = viewportEl.scrollWidth;\n        if (scrollableContentHeight === 0 || scrollableContentWidth === 0) return;\n        const scrollbarYEl = getScrollbarYEl(scope);\n        const scrollbarXEl = getScrollbarXEl(scope);\n        const thumbYEl = getThumbYEl(scope);\n        const thumbXEl = getThumbXEl(scope);\n        const viewportHeight = viewportEl.clientHeight;\n        const viewportWidth = viewportEl.clientWidth;\n        const scrollTop = viewportEl.scrollTop;\n        const scrollLeft = viewportEl.scrollLeft;\n        const scrollbarYHidden = viewportHeight >= scrollableContentHeight;\n        const scrollbarXHidden = viewportWidth >= scrollableContentWidth;\n        const ratioX = viewportWidth / scrollableContentWidth;\n        const ratioY = viewportHeight / scrollableContentHeight;\n        const nextWidth = scrollbarXHidden ? 0 : viewportWidth;\n        const nextHeight = scrollbarYHidden ? 0 : viewportHeight;\n        const scrollbarXOffset = getScrollOffset(scrollbarXEl, \"padding\", \"x\");\n        const scrollbarYOffset = getScrollOffset(scrollbarYEl, \"padding\", \"y\");\n        const thumbXOffset = getScrollOffset(thumbXEl, \"margin\", \"x\");\n        const thumbYOffset = getScrollOffset(thumbYEl, \"margin\", \"y\");\n        const idealNextWidth = nextWidth - scrollbarXOffset - thumbXOffset;\n        const idealNextHeight = nextHeight - scrollbarYOffset - thumbYOffset;\n        const maxNextWidth = scrollbarXEl ? Math.min(scrollbarXEl.offsetWidth, idealNextWidth) : idealNextWidth;\n        const maxNextHeight = scrollbarYEl ? Math.min(scrollbarYEl.offsetHeight, idealNextHeight) : idealNextHeight;\n        const clampedNextWidth = Math.max(MIN_THUMB_SIZE, maxNextWidth * ratioX);\n        const clampedNextHeight = Math.max(MIN_THUMB_SIZE, maxNextHeight * ratioY);\n        context.set(\"thumbSize\", (prevSize) => {\n          if (prevSize.height === clampedNextHeight && prevSize.width === clampedNextWidth) {\n            return prevSize;\n          }\n          return {\n            width: clampedNextWidth,\n            height: clampedNextHeight\n          };\n        });\n        if (scrollbarYEl && thumbYEl) {\n          const maxThumbOffsetY = scrollbarYEl.offsetHeight - clampedNextHeight - scrollbarYOffset - thumbYOffset;\n          const scrollRatioY = scrollTop / (scrollableContentHeight - viewportHeight);\n          const thumbOffsetY = Math.min(maxThumbOffsetY, Math.max(0, scrollRatioY * maxThumbOffsetY));\n          thumbYEl.style.transform = `translate3d(0,${thumbOffsetY}px,0)`;\n        }\n        if (scrollbarXEl && thumbXEl) {\n          const maxThumbOffsetX = scrollbarXEl.offsetWidth - clampedNextWidth - scrollbarXOffset - thumbXOffset;\n          const scrollRatioX = scrollLeft / (scrollableContentWidth - viewportWidth);\n          const thumbOffsetX = prop(\"dir\") === \"rtl\" ? (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(scrollRatioX * maxThumbOffsetX, -maxThumbOffsetX, 0) : (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.clampValue)(scrollRatioX * maxThumbOffsetX, 0, maxThumbOffsetX);\n          thumbXEl.style.transform = `translate3d(${thumbOffsetX}px,0,0)`;\n        }\n        const cornerEl = getCornerEl(scope);\n        if (cornerEl) {\n          if (scrollbarXHidden || scrollbarYHidden) {\n            context.set(\"cornerSize\", { width: 0, height: 0 });\n          } else if (!scrollbarXHidden && !scrollbarYHidden) {\n            const width = scrollbarYEl?.offsetWidth || 0;\n            const height = scrollbarXEl?.offsetHeight || 0;\n            context.set(\"cornerSize\", { width, height });\n          }\n        }\n        context.set(\"hiddenState\", (prevState) => {\n          const cornerHidden = scrollbarYHidden || scrollbarXHidden;\n          if (prevState.scrollbarYHidden === scrollbarYHidden && prevState.scrollbarXHidden === scrollbarXHidden && prevState.cornerHidden === cornerHidden) {\n            return prevState;\n          }\n          return {\n            scrollbarYHidden,\n            scrollbarXHidden,\n            cornerHidden\n          };\n        });\n        context.set(\"atSides\", (prev) => {\n          const next = getScrollSides(viewportEl, prop(\"dir\"));\n          if ((0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.isEqual)(prev, next)) return prev;\n          return next;\n        });\n      },\n      checkHovering({ scope, context }) {\n        const viewportEl = getViewportEl(scope);\n        if (viewportEl?.matches(\":hover\")) {\n          context.set(\"hovering\", true);\n        }\n      },\n      setScrolling({ event, refs, context, prop }) {\n        const scrollPosition = {\n          x: event.target.scrollLeft,\n          y: event.target.scrollTop\n        };\n        const scrollPositionRef = refs.get(\"scrollPosition\");\n        const offsetX = scrollPosition.x - scrollPositionRef.x;\n        const offsetY = scrollPosition.y - scrollPositionRef.y;\n        refs.set(\"scrollPosition\", scrollPosition);\n        context.set(\"atSides\", (prev) => {\n          const next = getScrollSides(event.target, prop(\"dir\"));\n          if ((0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.isEqual)(prev, next)) return prev;\n          return next;\n        });\n        if (offsetY !== 0) {\n          context.set(\"scrollingY\", true);\n          refs.get(\"scrollYTimeout\").start(SCROLL_TIMEOUT, () => {\n            context.set(\"scrollingY\", false);\n          });\n        }\n        if (offsetX !== 0) {\n          context.set(\"scrollingX\", true);\n          refs.get(\"scrollXTimeout\").start(SCROLL_TIMEOUT, () => {\n            context.set(\"scrollingX\", false);\n          });\n        }\n      },\n      scrollToPointer({ event, scope, prop }) {\n        const viewportEl = getViewportEl(scope);\n        if (!viewportEl) return;\n        const thumbYRef = getThumbYEl(scope);\n        const scrollbarYRef = getScrollbarYEl(scope);\n        const thumbXRef = getThumbXEl(scope);\n        const scrollbarXRef = getScrollbarXEl(scope);\n        const client = event.point;\n        if (thumbYRef && scrollbarYRef && event.orientation === \"vertical\") {\n          const thumbYOffset = getScrollOffset(thumbYRef, \"margin\", \"y\");\n          const scrollbarYOffset = getScrollOffset(scrollbarYRef, \"padding\", \"y\");\n          const thumbHeight = thumbYRef.offsetHeight;\n          const trackRectY = scrollbarYRef.getBoundingClientRect();\n          const clickY = client.y - trackRectY.top - thumbHeight / 2 - scrollbarYOffset + thumbYOffset / 2;\n          const scrollableContentHeight = viewportEl.scrollHeight;\n          const viewportHeight = viewportEl.clientHeight;\n          const maxThumbOffsetY = scrollbarYRef.offsetHeight - thumbHeight - scrollbarYOffset - thumbYOffset;\n          const scrollRatioY = clickY / maxThumbOffsetY;\n          const newScrollTop = scrollRatioY * (scrollableContentHeight - viewportHeight);\n          viewportEl.scrollTop = newScrollTop;\n        }\n        if (thumbXRef && scrollbarXRef && event.orientation === \"horizontal\") {\n          const thumbXOffset = getScrollOffset(thumbXRef, \"margin\", \"x\");\n          const scrollbarXOffset = getScrollOffset(scrollbarXRef, \"padding\", \"x\");\n          const thumbWidth = thumbXRef.offsetWidth;\n          const trackRectX = scrollbarXRef.getBoundingClientRect();\n          const clickX = client.x - trackRectX.left - thumbWidth / 2 - scrollbarXOffset + thumbXOffset / 2;\n          const scrollableContentWidth = viewportEl.scrollWidth;\n          const viewportWidth = viewportEl.clientWidth;\n          const maxThumbOffsetX = scrollbarXRef.offsetWidth - thumbWidth - scrollbarXOffset - thumbXOffset;\n          const scrollRatioX = clickX / maxThumbOffsetX;\n          let newScrollLeft;\n          if (prop(\"dir\") === \"rtl\") {\n            newScrollLeft = (1 - scrollRatioX) * (scrollableContentWidth - viewportWidth);\n            if (viewportEl.scrollLeft <= 0) {\n              newScrollLeft = -newScrollLeft;\n            }\n          } else {\n            newScrollLeft = scrollRatioX * (scrollableContentWidth - viewportWidth);\n          }\n          viewportEl.scrollLeft = newScrollLeft;\n        }\n      },\n      startDragging({ event, refs, scope }) {\n        refs.set(\"startX\", event.point.x);\n        refs.set(\"startY\", event.point.y);\n        refs.set(\"orientation\", event.orientation);\n        const viewportEl = getViewportEl(scope);\n        if (!viewportEl) return;\n        refs.set(\"startScrollTop\", viewportEl.scrollTop);\n        refs.set(\"startScrollLeft\", viewportEl.scrollLeft);\n      },\n      setDraggingScroll({ event, refs, scope, context }) {\n        const startY = refs.get(\"startY\");\n        const startX = refs.get(\"startX\");\n        const startScrollTop = refs.get(\"startScrollTop\");\n        const startScrollLeft = refs.get(\"startScrollLeft\");\n        const client = event.point;\n        const deltaY = client.y - startY;\n        const deltaX = client.x - startX;\n        const viewportEl = getViewportEl(scope);\n        if (!viewportEl) return;\n        const scrollableContentHeight = viewportEl.scrollHeight;\n        const viewportHeight = viewportEl.clientHeight;\n        const scrollableContentWidth = viewportEl.scrollWidth;\n        const viewportWidth = viewportEl.clientWidth;\n        const orientation = refs.get(\"orientation\");\n        const thumbYEl = getThumbYEl(scope);\n        const scrollbarYEl = getScrollbarYEl(scope);\n        if (thumbYEl && scrollbarYEl && orientation === \"vertical\") {\n          const scrollbarYOffset = getScrollOffset(scrollbarYEl, \"padding\", \"y\");\n          const thumbYOffset = getScrollOffset(thumbYEl, \"margin\", \"y\");\n          const thumbHeight = thumbYEl.offsetHeight;\n          const maxThumbOffsetY = scrollbarYEl.offsetHeight - thumbHeight - scrollbarYOffset - thumbYOffset;\n          const scrollRatioY = deltaY / maxThumbOffsetY;\n          viewportEl.scrollTop = startScrollTop + scrollRatioY * (scrollableContentHeight - viewportHeight);\n          context.set(\"scrollingY\", true);\n          refs.get(\"scrollYTimeout\").start(SCROLL_TIMEOUT, () => {\n            context.set(\"scrollingY\", false);\n          });\n        }\n        const thumbXEl = getThumbXEl(scope);\n        const scrollbarXEl = getScrollbarXEl(scope);\n        if (thumbXEl && scrollbarXEl && orientation === \"horizontal\") {\n          const scrollbarXOffset = getScrollOffset(scrollbarXEl, \"padding\", \"x\");\n          const thumbXOffset = getScrollOffset(thumbXEl, \"margin\", \"x\");\n          const thumbWidth = thumbXEl.offsetWidth;\n          const maxThumbOffsetX = scrollbarXEl.offsetWidth - thumbWidth - scrollbarXOffset - thumbXOffset;\n          const scrollRatioX = deltaX / maxThumbOffsetX;\n          viewportEl.scrollLeft = startScrollLeft + scrollRatioX * (scrollableContentWidth - viewportWidth);\n          context.set(\"scrollingX\", true);\n          refs.get(\"scrollXTimeout\").start(SCROLL_TIMEOUT, () => {\n            context.set(\"scrollingX\", false);\n          });\n        }\n      },\n      stopDragging({ refs }) {\n        refs.set(\"orientation\", null);\n      },\n      clearTimeouts({ refs }) {\n        refs.get(\"scrollYTimeout\").clear();\n        refs.get(\"scrollXTimeout\").clear();\n        refs.get(\"scrollEndTimeout\").clear();\n      }\n    },\n    effects: {\n      trackContentResize({ scope, send }) {\n        const contentEl = getContentEl(scope);\n        if (!contentEl) return;\n        const win = scope.getWin();\n        const obs = new win.ResizeObserver(() => {\n          setTimeout(() => {\n            send({ type: \"thumb.measure\" });\n          }, 1);\n        });\n        obs.observe(contentEl);\n        return () => {\n          obs.disconnect();\n        };\n      },\n      trackViewportVisibility({ scope, send }) {\n        const win = scope.getWin();\n        const viewportEl = getViewportEl(scope);\n        if (!viewportEl) return;\n        const observer = new win.IntersectionObserver((entries) => {\n          entries.forEach((entry) => {\n            if (entry.intersectionRatio > 0) {\n              send({ type: \"thumb.measure\" });\n              observer.disconnect();\n            }\n          });\n        });\n        observer.observe(viewportEl);\n        return () => {\n          observer.disconnect();\n        };\n      },\n      trackWheelEvent({ scope }) {\n        const scrollbarYEl = getScrollbarYEl(scope);\n        const scrollbarXEl = getScrollbarXEl(scope);\n        if (!scrollbarYEl && !scrollbarXEl) return;\n        const onWheel = (event) => {\n          const viewportEl = getViewportEl(scope);\n          if (!viewportEl || event.ctrlKey) return;\n          const orientation = event.currentTarget.dataset.orientation;\n          if (orientation === \"vertical\") {\n            const canScrollY = viewportEl.scrollHeight > viewportEl.clientHeight;\n            const atTop = viewportEl.scrollTop === 0 && event.deltaY < 0;\n            const atBottom = viewportEl.scrollTop === viewportEl.scrollHeight - viewportEl.clientHeight && event.deltaY > 0;\n            const shouldScroll = canScrollY && event.deltaY !== 0 && !(atTop || atBottom);\n            if (!shouldScroll) return;\n            event.preventDefault();\n            viewportEl.scrollTop += event.deltaY;\n          } else if (orientation === \"horizontal\") {\n            const canScrollX = viewportEl.scrollWidth > viewportEl.clientWidth;\n            const atLeft = viewportEl.scrollLeft === 0 && event.deltaX < 0;\n            const atRight = viewportEl.scrollLeft === viewportEl.scrollWidth - viewportEl.clientWidth && event.deltaX > 0;\n            const shouldScroll = canScrollX && event.deltaX !== 0 && !(atLeft || atRight);\n            if (!shouldScroll) return;\n            event.preventDefault();\n            viewportEl.scrollLeft += event.deltaX;\n          }\n        };\n        return (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.callAll)(\n          scrollbarYEl && (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(scrollbarYEl, \"wheel\", onWheel, { passive: false }),\n          scrollbarXEl && (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.addDomEvent)(scrollbarXEl, \"wheel\", onWheel, { passive: false })\n        );\n      },\n      trackPointerMove({ scope, send, refs }) {\n        const doc = scope.getDoc();\n        const orientation = refs.get(\"orientation\");\n        return (0,_zag_js_dom_query__WEBPACK_IMPORTED_MODULE_1__.trackPointerMove)(doc, {\n          onPointerMove({ point }) {\n            send({ type: \"thumb.pointermove\", orientation, point });\n          },\n          onPointerUp() {\n            send({ type: \"thumb.pointerup\", orientation });\n          }\n        });\n      }\n    }\n  }\n});\nvar props = (0,_zag_js_types__WEBPACK_IMPORTED_MODULE_4__.createProps)()([\"dir\", \"getRootNode\", \"ids\", \"id\"]);\nvar splitProps = (0,_zag_js_utils__WEBPACK_IMPORTED_MODULE_2__.createSplitProps)(props);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@zag-js+scroll-area@1.21.7/node_modules/@zag-js/scroll-area/dist/index.mjs\n");

/***/ })

};
;